{"version":3,"sources":["components/ScreenHeader.js","components/Scores.js","components/MatchTimer.js","components/MatchScreen.js","App.js","serviceWorker.js","index.js"],"names":["ScreenHeader","className","Scores","props","state","screenMode","this","title","buttonColor","sideScore","scoreSide","mountScore","scoreMount","backScore","scoreBack","totalScore","scoringMode","side","buttonStateSide","buttonStateMount","buttonStateBack","Header","as","color","Button","size","content","onClick","Statistic","Value","Label","Component","MatchTimer","minutes","Math","floor","timeRemaining","seconds","class","startTimer","centralButton","icon","centralButtonIcon","matchResult","MatchScreen","togglePreselect","setState","startTestMatch","matchTime","leftMountScore","leftBackScore","leftSideScore","leftTotalScore","rightSideScore","rightMountScore","rightBackScore","rightTotalScore","endMatch","console","log","tick","scoreLeftSide","scoreLeftMount","scoreLeftBack","scoreRightSide","scoreRightMount","scoreRightBack","time","React","MainTimerArea","setInterval","clearInterval","timerID","Preselect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc3c9ef2.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ScreenHeader() {\n    return (\n      <div>\n        <div className=\"screenheader\">\n          <div>\n            <h1>Devon Wrestling Timer</h1>\n          </div>\n        </div>\n        <hr />\n      </div>\n    );\n  }\n\n  export default ScreenHeader;","import React, {Component} from 'react';\n\nimport {Statistic, Button, Header} from 'semantic-ui-react'\n\nclass Scores extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        screenMode: this.props.screenMode\n      };\n    }\n  \n    render() {\n      // destructure the props\n      const {\n        title,\n        buttonColor,\n        sideScore,\n        scoreSide,\n        mountScore,\n        scoreMount,\n        backScore,\n        scoreBack,\n        totalScore,\n        scoringMode,\n        side,\n        screenMode\n      } = this.props;\n  \n      let buttonStateSide = \"ui basic button\";\n      let buttonStateMount = \"ui basic button\";\n      let buttonStateBack = \"ui basic button\";\n  \n      // set the button states\n  \n      if (scoringMode == `${side} side`) {\n        buttonStateSide = \"ui active button\";\n        buttonStateMount = \"ui basic button\";\n        buttonStateBack = \"ui basic button\";\n      } else if (scoringMode == `${side} mount`) {\n        buttonStateSide = \"ui basic button\";\n        buttonStateMount = \"ui active button\";\n        buttonStateBack = \"ui basic button\";\n      } else if (scoringMode == `${side} back`) {\n        buttonStateSide = \"ui basic button\";\n        buttonStateMount = \"ui basic button\";\n        buttonStateBack = \"ui active button\";\n      } else if (scoringMode == \"waiting\") {\n        buttonStateSide = \"ui basic button\";\n        buttonStateMount = \"ui basic button\";\n        buttonStateBack = \"ui basic button\";\n      }\n  \n      return (\n        <div className=\"control\">\n          <div className=\"scoretitle\">\n            <Header as=\"h4\" color={buttonColor}>\n              {title}\n            </Header>\n          </div>\n  \n          <div className=\"scorebuttons\">\n            <div className=\"scorebutton\">\n              {\" \"}\n              <Button\n                size=\"massive\"\n                content=\"Side \"\n                onClick={scoreSide}\n                color={buttonColor}\n                className={buttonStateSide}\n              />{\" \"}\n            </div>\n  \n            <div className=\"scorebutton\">\n              {\" \"}\n              <Button\n                size=\"massive\"\n                content=\"Mount\"\n                onClick={scoreMount}\n                color={buttonColor}\n                className={buttonStateMount}\n              />{\" \"}\n            </div>\n  \n            <div className=\"scorebutton\">\n              {\" \"}\n              <Button\n                size=\"massive\"\n                content=\"Back \"\n                onClick={scoreBack}\n                color={buttonColor}\n                className={buttonStateBack}\n              />{\" \"}\n            </div>\n          </div>\n  \n          <div className=\"scorebox\">\n            <div className=\"positionscore\">\n              <Statistic size=\"tiny\" color={buttonColor}>\n                <Statistic.Value>{sideScore}</Statistic.Value>\n                <Statistic.Label>Side</Statistic.Label>\n              </Statistic>\n            </div>\n  \n            <div className=\"positionscore\">\n              <Statistic size=\"tiny\" color={buttonColor}>\n                <Statistic.Value>{mountScore}</Statistic.Value>\n                <Statistic.Label>Mount</Statistic.Label>\n              </Statistic>\n            </div>\n  \n            <div className=\"positionscore\">\n              <Statistic size=\"tiny\" color={buttonColor}>\n                <Statistic.Value>{backScore}</Statistic.Value>\n                <Statistic.Label>Back</Statistic.Label>\n              </Statistic>\n            </div>\n  \n            <div className=\"totalscore\">\n              <Statistic color={buttonColor}>\n                <Statistic.Value>{totalScore}</Statistic.Value>\n                <Statistic.Label>Total</Statistic.Label>\n              </Statistic>\n            </div>\n          </div>\n        </div> // end control\n      );\n    }\n  }\n\nexport default Scores;","import React from 'react';\n\nimport {Statistic, Button, Header} from 'semantic-ui-react'\n\nfunction MatchTimer(props) {\n    // convert the seconds into minutes and seconds\n    let minutes = Math.floor(props.timeRemaining / 60);\n    let seconds = props.timeRemaining - minutes * 60;\n  \n    // add a zero before single seconds so timer reads\n    // 0:01 in stead of 0:1 etc\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n  \n    if (props.screenMode == \"matchended\") {\n      return (\n        <div class=\"maintimer\">\n          <Statistic color=\"black\">\n            <Statistic.Value>\n              {minutes}:{seconds}\n            </Statistic.Value>\n            <Statistic.Label>MATCH OVER</Statistic.Label>\n          </Statistic>\n  \n          <Button\n            size=\"massive\"\n            onClick={props.startTimer}\n            content={props.centralButton}\n            icon={props.centralButtonIcon}\n          />\n  \n          <Header as=\"h1\">{props.matchResult}</Header>\n        </div>\n      );\n    } else {\n      return (\n        <div class=\"maintimer\">\n          <Statistic color=\"black\">\n            <Statistic.Value>\n              {minutes}:{seconds}\n            </Statistic.Value>\n            <Statistic.Label>Time Remaining</Statistic.Label>\n          </Statistic>\n  \n          <Button\n            size=\"massive\"\n            onClick={props.startTimer}\n            content={props.centralButton}\n            icon={props.centralButtonIcon}\n          />\n        </div>\n      );\n    }\n  }\n\n  export default MatchTimer;","import React, {Component} from 'react';\n\nimport { Button, Header} from 'semantic-ui-react'\n\nimport Scores from './Scores'\nimport MatchTimer from './MatchTimer'\n\n\nclass MatchScreen extends React.Component {\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        screenMode: \"preselect\",\n        timeRemaining: 111,\n        leftMountScore: 0,\n        leftBackScore: 0,\n        leftSideScore: 0,\n        leftTotalScore: 0,\n        rightSideScore: 0,\n        rightMountScore: 0,\n        rightBackScore: 0,\n        rightTotalScore: 0,\n        scoringMode: \"waiting\",\n        centralButton: \"Start\",\n        centralButtonIcon: \"play\",\n        matchResult: \"DRAW\"\n      };\n    }\n  \n    // togglePreselect - possible use in later version\n  \n    togglePreselect = () => {\n      if (this.state.screenMode == \"preselect\") {\n        this.setState({ screenMode: \"active\" });\n      } else {\n        this.setState({ screenMode: \"preselect\" });\n      }\n    };\n  \n    startTestMatch = matchTime => {\n      if (this.state.screenMode == \"preselect\") {\n        this.setState({ screenMode: \"active\",  timeRemaining: matchTime  });\n      } else {\n        this.setState({ screenMode: \"preselect\" });\n      }\n    };\n  \n    startTimer = () => {\n      switch (this.state.screenMode) {\n        case \"active\":\n          this.setState({ screenMode: \"inprogress\" });\n          this.setState({ centralButton: \"Pause\", centralButtonIcon: \"pause\" });\n          break;\n  \n        case \"inprogress\":\n          this.setState({ screenMode: \"paused\" });\n          this.setState({ centralButton: \"Resume\", centralButtonIcon: \"play\" });\n          break;\n  \n        case \"paused\":\n          this.setState({ screenMode: \"inprogress\" });\n          this.setState({ centralButton: \"Pause\", centralButtonIcon: \"pause\" });\n          break;\n  \n        case \"matchended\":\n          this.setState({\n            screenMode: \"preselect\",\n            timeRemaining: 111,\n            leftMountScore: 0,\n            leftBackScore: 0,\n            leftSideScore: 0,\n            leftTotalScore: 0,\n            rightSideScore: 0,\n            rightMountScore: 0,\n            rightBackScore: 0,\n            rightTotalScore: 0,\n            scoringMode: \"waiting\",\n            centralButton: \"Start\",\n            centralButtonIcon: \"play\",\n            matchResult: \"DRAW\"\n          });\n      }\n    };\n  \n    endMatch = () => {\n      if (this.state.timeRemaining < 1) {\n        console.log(\"Match is over!\");\n        this.setState({\n          screenMode: \"matchended\",\n          centralButton: \"Reset\",\n          centralButtonIcon: \"refresh\"\n        });\n  \n        if (this.state.rightTotalScore > this.state.leftTotalScore) {\n          this.setState({ matchResult: \"RED WINS\" });\n        } else if (this.state.rightTotalScore < this.state.leftTotalScore) {\n          this.setState({ matchResult: \"BLUE WINS\" });\n        }\n      }\n    };\n  \n    tick = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        // count the scores\n        switch (this.state.scoringMode) {\n          case \"left side\":\n            this.setState({ leftSideScore: this.state.leftSideScore + 1 });\n            break;\n          case \"right side\":\n            this.setState({ rightSideScore: this.state.rightSideScore + 1 });\n            break;\n          case \"left mount\":\n            this.setState({ leftMountScore: this.state.leftMountScore + 1 });\n            break;\n          case \"right mount\":\n            this.setState({ rightMountScore: this.state.rightMountScore + 1 });\n            break;\n          case \"left back\":\n            this.setState({ leftBackScore: this.state.leftBackScore + 1 });\n            break;\n          case \"right back\":\n            this.setState({ rightBackScore: this.state.rightBackScore + 1 });\n            break;\n        }\n        // add up the scores to display total score\n        this.setState({\n          timeRemaining: this.state.timeRemaining - 1,\n  \n          leftTotalScore:\n            this.state.leftMountScore +\n            this.state.leftBackScore +\n            this.state.leftSideScore,\n  \n          rightTotalScore:\n            this.state.rightMountScore +\n            this.state.rightBackScore +\n            this.state.rightSideScore\n        });\n      }\n    };\n  \n    scoreLeftSide = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        if (this.state.scoringMode == \"waiting\") {\n          this.setState({ scoringMode: \"left side\" });\n        } else if (this.state.scoringMode == \"left side\") {\n          this.setState({ scoringMode: \"waiting\" });\n        }\n      }\n    };\n    scoreLeftMount = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        if (this.state.scoringMode == \"waiting\") {\n          this.setState({ scoringMode: \"left mount\" });\n        } else if (this.state.scoringMode == \"left mount\") {\n          this.setState({ scoringMode: \"waiting\" });\n        }\n      }\n    };\n    scoreLeftBack = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        if (this.state.scoringMode == \"waiting\") {\n          this.setState({ scoringMode: \"left back\" });\n        } else if (this.state.scoringMode == \"left back\") {\n          this.setState({ scoringMode: \"waiting\" });\n        }\n      }\n    };\n  \n    scoreRightSide = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        if (this.state.scoringMode == \"waiting\") {\n          this.setState({ scoringMode: \"right side\" });\n        } else if (this.state.scoringMode == \"right side\") {\n          this.setState({ scoringMode: \"waiting\" });\n        }\n      }\n    };\n  \n    scoreRightMount = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        if (this.state.scoringMode == \"waiting\") {\n          this.setState({ scoringMode: \"right mount\" });\n        } else if (this.state.scoringMode == \"right mount\") {\n          this.setState({ scoringMode: \"waiting\" });\n        }\n      }\n    };\n    scoreRightBack = () => {\n      if (this.state.screenMode == \"inprogress\") {\n        if (this.state.scoringMode == \"waiting\") {\n          this.setState({ scoringMode: \"right back\" });\n        } else if (this.state.scoringMode == \"right back\") {\n          this.setState({ scoringMode: \"waiting\" });\n        }\n      }\n    };\n  \n    render() {\n      return (\n        <div className=\"matchscreen\">\n          <Scores\n            title={\"Left Scores\"}\n            side=\"left\"\n            buttonColor=\"blue\"\n            screenMode={this.state.screenMode}\n            mountScore={this.state.leftMountScore}\n            backScore={this.state.leftBackScore}\n            sideScore={this.state.leftSideScore}\n            scoreMount={this.scoreLeftMount}\n            scoreBack={this.scoreLeftBack}\n            scoreSide={this.scoreLeftSide}\n            totalScore={this.state.leftTotalScore}\n            scoringMode={this.state.scoringMode}\n          />\n  \n          <MainTimerArea\n            time={\"get from matchscreen.state\"}\n            screenMode={this.state.screenMode}\n            togglePreselect={this.togglePreselect}\n            startTestMatch={this.startTestMatch}\n            timeRemaining={this.state.timeRemaining}\n            startTimer={this.startTimer}\n            screenMode={this.state.screenMode}\n            tick={this.tick}\n            endMatch={this.endMatch}\n            centralButton={this.state.centralButton}\n            centralButtonIcon={this.state.centralButtonIcon}\n            matchResult={this.state.matchResult}\n          />\n  \n          <Scores\n            title={\"Right Scores\"}\n            side=\"right\"\n            buttonColor=\"red\"\n            screenMode={this.state.screenMode}\n            mountScore={this.state.rightMountScore}\n            backScore={this.state.rightBackScore}\n            sideScore={this.state.rightSideScore}\n            scoreMount={this.scoreRightMount}\n            scoreBack={this.scoreRightBack}\n            scoreSide={this.scoreRightSide}\n            totalScore={this.state.rightTotalScore}\n            scoringMode={this.state.scoringMode}\n          />\n        </div>\n      );\n    }\n  }\n  \n  class MainTimerArea extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        screenMode: this.props.screenMode\n      };\n    }\n  \n    componentDidMount() {\n      setInterval(() => this.props.tick(), 1000);\n      setInterval(() => this.props.endMatch(), 1000);\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  \n    render() {\n      // destructure props\n  \n      let {\n        screenMode,\n        timeRemaining,\n        startTestMatch,\n        centralButton,\n        centralButtonIcon,\n        startTimer,\n        matchResult\n      } = this.props;\n  \n      if (screenMode == \"preselect\") {\n        return <Preselect startTestMatch={startTestMatch} />;\n      } else {\n        return (\n          <div>\n            <div className=\"control\">\n              <MatchTimer\n                timeRemaining={timeRemaining}\n                centralButton={centralButton}\n                centralButtonIcon={centralButtonIcon}\n                screenMode={screenMode}\n                startTimer={startTimer}\n                matchResult={matchResult}\n              />\n            </div>\n          </div>\n        );\n      }\n    }\n  }\n  \n  function Preselect(props) {\n    return (\n      <div>\n        <div className=\"control\">\n          <div className=\"preselect\">\n            <Header as=\"h3\" color=\"black\">\n              Select Match Length\n            </Header>\n  \n            <div className=\"preselectbuttons\">\n              <Button\n                content=\"3 minute match\"\n                onClick={() => {\n                  props.startTestMatch(180);\n                }}\n              />\n              <Button\n                content=\"4 minute match\"\n                onClick={() => {\n                  props.startTestMatch(240);\n                }}\n              />\n              <Button\n                content=\"5 minute match\"\n                onClick={() => {\n                  props.startTestMatch(300);\n                }}\n              />\n              <Button\n                content=\"6 minute match\"\n                onClick={() => {\n                  props.startTestMatch(360);\n                }}\n              />\n              <Button\n                content=\"7 minute match\"\n                onClick={() => {\n                  props.startTestMatch(420);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  \nexport default MatchScreen;  ","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Statistic, Button, Header } from \"semantic-ui-react\";\n\nimport ScreenHeader from './components/ScreenHeader'\n\nimport MatchScreen from './components/MatchScreen'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScreenHeader />\n      <MatchScreen />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}