{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ScreenHeader","className","App","MatchScreen","props","togglePreselect","state","screenMode","setState","startTestMatch","matchTime","timeRemaining","console","log","startTimer","centralButton","centralButtonIcon","leftMountScore","leftBackScore","leftSideScore","leftTotalScore","rightSideScore","rightMountScore","rightBackScore","rightTotalScore","scoringMode","matchResult","endMatch","tick","scoreLeftSide","scoreLeftMount","scoreLeftBack","scoreRightSide","scoreRightMount","scoreRightBack","class","title","side","buttonColor","this","mountScore","backScore","sideScore","scoreMount","scoreBack","scoreSide","totalScore","time","React","Component","MainTimerArea","goToReadyScreen","timeToSet","pauseTimer","setInterval","clearInterval","timerID","Preselect","MatchTimer","Header","as","color","Button","content","onClick","minutes","Math","floor","seconds","Statistic","Value","Label","size","icon","Scores","buttonStateSide","buttonStateMount","buttonStateBack","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3435125a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Statistic, Button, Header, Divider } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScreenHeader />\n      <MatchScreen />\n    </div>\n  );\n}\n\nfunction ScreenHeader() {\n  return (\n    <div>\n      <div className=\"screenheader\">\n        <div>\n          <h1>Devon Wrestling</h1>\n        </div>\n      </div>\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n\nclass MatchScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      screenMode: \"preselect\",\n      timeRemaining: 111,\n      leftMountScore: 0,\n      leftBackScore: 0,\n      leftSideScore: 0,\n      leftTotalScore: 0,\n      rightSideScore: 0,\n      rightMountScore: 0,\n      rightBackScore: 0,\n      rightTotalScore: 0,\n      scoringMode: \"waiting\",\n      centralButton: \"Start\",\n      centralButtonIcon: \"play\",\n      matchResult: \"DRAW\"\n    };\n  }\n\n  //states = mode :preselect/ready\n\n  //timeRemaning\n  //scores for left and right\n\n  togglePreselect = () => {\n    if (this.state.screenMode == \"preselect\") {\n      this.setState({ screenMode: \"active\" });\n    } else {\n      this.setState({ screenMode: \"preselect\" });\n    }\n  };\n\n  startTestMatch = matchTime => {\n    if (this.state.screenMode == \"preselect\") {\n      this.setState({ screenMode: \"active\" });\n      this.setState({ timeRemaining: matchTime });\n      console.log(\"selected test match...\");\n    } else {\n      this.setState({ screenMode: \"preselect\" });\n    }\n  };\n\n  startTimer = () => {\n    switch (this.state.screenMode) {\n      case \"active\":\n        this.setState({ screenMode: \"inprogress\" });\n        this.setState({ centralButton: \"Pause\", centralButtonIcon: \"pause\" });\n        break;\n\n      case \"inprogress\":\n        this.setState({ screenMode: \"paused\" });\n        this.setState({ centralButton: \"Resume\", centralButtonIcon: \"play\" });\n        break;\n\n      case \"paused\":\n        this.setState({ screenMode: \"inprogress\" });\n        this.setState({ centralButton: \"Pause\", centralButtonIcon: \"pause\" });\n        break;\n\n      case \"matchended\":\n        this.setState({\n          screenMode: \"preselect\",\n          timeRemaining: 111,\n          leftMountScore: 0,\n          leftBackScore: 0,\n          leftSideScore: 0,\n          leftTotalScore: 0,\n          rightSideScore: 0,\n          rightMountScore: 0,\n          rightBackScore: 0,\n          rightTotalScore: 0,\n          scoringMode: \"waiting\",\n          centralButton: \"Start\",\n          centralButtonIcon: \"play\",\n          matchResult: \"DRAW\"\n        });\n    }\n\n    // Start the timer - will need to change parent timeRemaining state\n    // or let tick do that, and instead just change parent\n    // timerMode\n  };\n\n  endMatch = () => {\n    if (this.state.timeRemaining < 1) {\n      console.log(\"Match is over!\");\n      this.setState({ screenMode: \"matchended\" });\n      this.setState({ centralButton: \"Reset\", centralButtonIcon: \"refresh\" });\n\n      if (this.state.rightTotalScore > this.state.leftTotalScore) {\n        this.setState({ matchResult: \"RED WINS\" });\n      } else if (this.state.rightTotalScore < this.state.leftTotalScore) {\n        this.setState({ matchResult: \"BLUE WINS\" });\n      }\n    }\n  };\n\n  tick = () => {\n    console.log(\"tick invoked\");\n    if (this.state.screenMode == \"inprogress\") {\n      console.log(\"match in progress\");\n\n      // count the scores\n      switch (this.state.scoringMode) {\n        case \"left side\":\n          this.setState({ leftSideScore: this.state.leftSideScore + 1 });\n          break;\n        case \"right side\":\n          this.setState({ rightSideScore: this.state.rightSideScore + 1 });\n          break;\n        case \"left mount\":\n          this.setState({ leftMountScore: this.state.leftMountScore + 1 });\n          break;\n        case \"right mount\":\n          this.setState({ rightMountScore: this.state.rightMountScore + 1 });\n          break;\n        case \"left back\":\n          this.setState({ leftBackScore: this.state.leftBackScore + 1 });\n          break;\n        case \"right back\":\n          this.setState({ rightBackScore: this.state.rightBackScore + 1 });\n          break;\n      }\n      // add the scores to display total\n      this.setState({\n        timeRemaining: this.state.timeRemaining - 1,\n\n        leftTotalScore:\n          this.state.leftMountScore +\n          this.state.leftBackScore +\n          this.state.leftSideScore,\n\n        rightTotalScore:\n          this.state.rightMountScore +\n          this.state.rightBackScore +\n          this.state.rightSideScore\n      });\n    }\n  };\n\n  scoreLeftSide = () => {\n    if (this.state.screenMode == \"inprogress\") {\n      if (this.state.scoringMode == \"waiting\") {\n        this.setState({ scoringMode: \"left side\" });\n      } else if (this.state.scoringMode == \"left side\") {\n        this.setState({ scoringMode: \"waiting\" });\n      }\n    }\n  };\n  scoreLeftMount = () => {\n    if (this.state.screenMode == \"inprogress\") {\n      if (this.state.scoringMode == \"waiting\") {\n        this.setState({ scoringMode: \"left mount\" });\n      } else if (this.state.scoringMode == \"left mount\") {\n        this.setState({ scoringMode: \"waiting\" });\n      }\n    }\n  };\n  scoreLeftBack = () => {\n    if (this.state.screenMode == \"inprogress\") {\n      if (this.state.scoringMode == \"waiting\") {\n        this.setState({ scoringMode: \"left back\" });\n      } else if (this.state.scoringMode == \"left back\") {\n        this.setState({ scoringMode: \"waiting\" });\n      }\n    }\n  };\n\n  scoreRightSide = () => {\n    if (this.state.screenMode == \"inprogress\") {\n      if (this.state.scoringMode == \"waiting\") {\n        this.setState({ scoringMode: \"right side\" });\n      } else if (this.state.scoringMode == \"right side\") {\n        this.setState({ scoringMode: \"waiting\" });\n      }\n    }\n  };\n\n  scoreRightMount = () => {\n    if (this.state.screenMode == \"inprogress\") {\n      if (this.state.scoringMode == \"waiting\") {\n        this.setState({ scoringMode: \"right mount\" });\n      } else if (this.state.scoringMode == \"right mount\") {\n        this.setState({ scoringMode: \"waiting\" });\n      }\n    }\n  };\n  scoreRightBack = () => {\n    if (this.state.screenMode == \"inprogress\") {\n      if (this.state.scoringMode == \"waiting\") {\n        this.setState({ scoringMode: \"right back\" });\n      } else if (this.state.scoringMode == \"right back\") {\n        this.setState({ scoringMode: \"waiting\" });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"matchscreen\">\n        <Scores\n          title={\"Left Scores\"}\n          side=\"left\"\n          buttonColor=\"blue\"\n          screenMode={this.state.screenMode}\n          mountScore={this.state.leftMountScore}\n          backScore={this.state.leftBackScore}\n          sideScore={this.state.leftSideScore}\n          scoreMount={this.scoreLeftMount}\n          scoreBack={this.scoreLeftBack}\n          scoreSide={this.scoreLeftSide}\n          totalScore={this.state.leftTotalScore}\n          scoringMode={this.state.scoringMode}\n        />\n\n        <MainTimerArea\n          time={\"get from matchscreen.state\"}\n          screenMode={this.state.screenMode}\n          togglePreselect={this.togglePreselect}\n          startTestMatch={this.startTestMatch}\n          timeRemaining={this.state.timeRemaining}\n          startTimer={this.startTimer}\n          screenMode={this.state.screenMode}\n          tick={this.tick}\n          endMatch={this.endMatch}\n          centralButton={this.state.centralButton}\n          centralButtonIcon={this.state.centralButtonIcon}\n          matchResult={this.state.matchResult}\n        />\n\n        <Scores\n          title={\"Right Scores\"}\n          side=\"right\"\n          buttonColor=\"red\"\n          screenMode={this.state.screenMode}\n          mountScore={this.state.rightMountScore}\n          backScore={this.state.rightBackScore}\n          sideScore={this.state.rightSideScore}\n          scoreMount={this.scoreRightMount}\n          scoreBack={this.scoreRightBack}\n          scoreSide={this.scoreRightSide}\n          totalScore={this.state.rightTotalScore}\n          scoringMode={this.state.scoringMode}\n        />\n      </div>\n    );\n  }\n}\n\nclass MainTimerArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      screenMode: this.props.screenMode\n\n      //timeRemaining: this.props.matchLength\n    };\n  }\n  // State = Mode: matchSelect/MatchPlay as props from Matchscren state\n\n  // STate = Timeremaining: get from Matchcreen parent\n\n  // Method: Change time remaining OR ready/match finished on matchscreen parent\n  //( it needs to do it on parent as scores need to know whether to keep goin\n  // and they can only receive that from mutual parent)\n\n  // Preselect screen method for changing parent state\n\n  componentDidMount() {\n    setInterval(() => this.props.tick(), 1000);\n    setInterval(() => this.props.endMatch(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  goToReadyScreen = timeToSet => {\n    // Change matchscreen.stte to active and change timeRemaning based\n    //on input\n  };\n\n  pauseTimer = () => {\n    console.log(\"timer paused\");\n    // Pause timer\n  };\n\n  render() {\n    let screenMode = this.props.screenMode;\n\n    let timeRemaining = this.props.timeRemaining;\n\n    const togglePreselect = this.props.togglePreselect;\n\n    const startTestMatch = this.props.startTestMatch;\n\n    console.log(screenMode);\n\n    if (screenMode == \"preselect\") {\n      return (\n        <Preselect\n          togglePreselect={togglePreselect}\n          startTestMatch={startTestMatch}\n        />\n      );\n    } else {\n      return (\n        <div>\n          <div class=\"control\">\n            <MatchTimer\n              timeRemaining={timeRemaining}\n              centralButton={this.props.centralButton}\n              centralButtonIcon={this.props.centralButtonIcon}\n              screenMode={this.props.screenMode}\n              startTimer={this.props.startTimer}\n              matchResult={this.props.matchResult}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nfunction Preselect(props) {\n  return (\n    <div>\n      <div class=\"control\">\n        <div class=\"preselect\">\n          <Header as=\"h3\" color=\"black\">\n            Select Match Length\n          </Header>\n\n          <div class=\"preselectbuttons\">\n            <Button\n              content=\"3 minute match\"\n              onClick={() => {\n                props.startTestMatch(180);\n              }}\n            />\n            <Button\n              content=\"4 minute match\"\n              onClick={() => {\n                props.startTestMatch(240);\n              }}\n            />\n            <Button\n              content=\"5 minute match\"\n              onClick={() => {\n                props.startTestMatch(300);\n              }}\n            />\n            <Button\n              content=\"6 minute match\"\n              onClick={() => {\n                props.startTestMatch(360);\n              }}\n            />\n            <Button\n              content=\"7 minute match\"\n              onClick={() => {\n                props.startTestMatch(420);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MatchTimer(props) {\n  // convert the seconds into minutes and seconds\n  let minutes = Math.floor(props.timeRemaining / 60);\n  let seconds = props.timeRemaining - minutes * 60;\n\n  // add a zero before single seconds so timer reads\n  // 0:01 in stead of 0:1 etc\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  if (props.screenMode == \"matchended\") {\n    return (\n      <div class=\"maintimer\">\n        <Statistic color=\"black\">\n          <Statistic.Value>\n            {minutes}:{seconds}\n          </Statistic.Value>\n          <Statistic.Label>MATCH OVER</Statistic.Label>\n        </Statistic>\n\n        <Button\n          size=\"massive\"\n          onClick={props.startTimer}\n          content={props.centralButton}\n          icon={props.centralButtonIcon}\n        />\n\n        <Header as=\"h1\">{props.matchResult}</Header>\n      </div>\n    );\n  } else {\n    return (\n      <div class=\"maintimer\">\n        <Statistic color=\"black\">\n          <Statistic.Value>\n            {minutes}:{seconds}\n          </Statistic.Value>\n          <Statistic.Label>Time Remaining</Statistic.Label>\n        </Statistic>\n\n        <Button\n          size=\"massive\"\n          onClick={props.startTimer}\n          content={props.centralButton}\n          icon={props.centralButtonIcon}\n        />\n      </div>\n    );\n  }\n}\n\nclass Scores extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      screenMode: this.props.screenMode\n      //timeRemaining: this.props.matchLength\n    };\n  }\n  // State: inactive or active, receive as props from Matchtimer state\n\n  // Method: Change all leftscore states on Matchtimer parent\n\n  render() {\n    // destructure the props\n    const {\n      title,\n      buttonColor,\n      sideScore,\n      scoreSide,\n      mountScore,\n      scoreMount,\n      backScore,\n      scoreBack,\n      totalScore,\n      scoringMode,\n      side,\n      screenMode\n    } = this.props;\n\n    let buttonStateSide = \"ui basic button\";\n    let buttonStateMount = \"ui basic button\";\n    let buttonStateBack = \"ui basic button\";\n\n    // set the button states\n\n    if (scoringMode == `${side} side`) {\n      buttonStateSide = \"ui active button\";\n      buttonStateMount = \"ui basic button\";\n      buttonStateBack = \"ui basic button\";\n    } else if (scoringMode == `${side} mount`) {\n      buttonStateSide = \"ui basic button\";\n      buttonStateMount = \"ui active button\";\n      buttonStateBack = \"ui basic button\";\n    } else if (scoringMode == `${side} back`) {\n      buttonStateSide = \"ui basic button\";\n      buttonStateMount = \"ui basic button\";\n      buttonStateBack = \"ui active button\";\n    } else if (scoringMode == \"waiting\") {\n      buttonStateSide = \"ui basic button\";\n      buttonStateMount = \"ui basic button\";\n      buttonStateBack = \"ui basic button\";\n    }\n\n    return (\n      <div class=\"control\">\n        <div class=\"scoretitle\">\n          <Header as=\"h4\" color={buttonColor}>\n            {title}\n          </Header>\n        </div>\n\n        <div class=\"scorebuttons\">\n          <div class=\"scorebutton\">\n            {\" \"}\n            <Button\n              size=\"massive\"\n              content=\"Side \"\n              onClick={scoreSide}\n              color={buttonColor}\n              className={buttonStateSide}\n            />{\" \"}\n          </div>\n\n          <div class=\"scorebutton\">\n            {\" \"}\n            <Button\n              size=\"massive\"\n              content=\"Mount\"\n              onClick={scoreMount}\n              color={buttonColor}\n              className={buttonStateMount}\n            />{\" \"}\n          </div>\n\n          <div class=\"scorebutton\">\n            {\" \"}\n            <Button\n              size=\"massive\"\n              content=\"Back \"\n              onClick={scoreBack}\n              color={buttonColor}\n              className={buttonStateBack}\n            />{\" \"}\n          </div>\n        </div>\n\n        <div class=\"scorebox\">\n          <div class=\"positionscore\">\n            <Statistic size=\"tiny\" color={buttonColor}>\n              <Statistic.Value>{sideScore}</Statistic.Value>\n              <Statistic.Label>Side</Statistic.Label>\n            </Statistic>\n          </div>\n\n          <div class=\"positionscore\">\n            <Statistic size=\"tiny\" color={buttonColor}>\n              <Statistic.Value>{mountScore}</Statistic.Value>\n              <Statistic.Label>Mount</Statistic.Label>\n            </Statistic>\n          </div>\n\n          <div class=\"positionscore\">\n            <Statistic size=\"tiny\" color={buttonColor}>\n              <Statistic.Value>{backScore}</Statistic.Value>\n              <Statistic.Label>Back</Statistic.Label>\n            </Statistic>\n          </div>\n\n          <div class=\"totalscore\">\n            <Statistic color={buttonColor}>\n              <Statistic.Value>{totalScore}</Statistic.Value>\n              <Statistic.Label>Total</Statistic.Label>\n            </Statistic>\n          </div>\n        </div>\n      </div> // end control\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}